#! /usr/bin/bash

# I'm sure there are better ways of doing this, but I REALLY don't work with bash/zsh scripts often.
# This just seemed like a more convenient way to execute some of the common shit that I do on my PC.

BDE_VERSION="0.21.0"

edit_prompt() {
  case "$1" in

      # Edit the script itself
      "")
        cd ~/.local/bin/ && $EDITOR bde
      ;;

      # Edit Hyprland configuration
      "colors")
        cd ~/.config/hypr/ && $EDITOR . extras/colors.conf
      ;;
      "hypr")
        cd ~/.config/hypr/ && $EDITOR . hyprland.conf
      ;;
      "keys")
        cd ~/.config/hypr/ && $EDITOR . core/binds.conf
      ;;
      "apps")
        cd ~/.config/hypr/ && $EDITOR . extras/user.conf
      ;;
      "deco")
        cd ~/.config/hypr/ && $EDITOR . core/decoration.conf
      ;;
      "startup")
        cd ~/.config/hypr/ && $EDITOR . core/startup.conf
      ;;
      "plugins")
        cd ~/.config/hypr/ && $EDITOR . extras/plugins.conf
      ;;
      "layout")
        cd ~/.config/hypr/ && $EDITOR . core/layout.conf
      ;;
      "rules")
        cd ~/.config/hypr/ && $EDITOR . extras/rules.conf
      ;;
      "env")
        cd ~/.config/hypr/ && $EDITOR . core/environment.conf
      ;;
      "custom")
        cd ~/.config/hypr/ && $EDITOR . extras/general.conf
      ;;
      "lock")
      	cd ~/.config/hypr/ && $EDITOR . hyprlock.conf
      ;;

      # Edit any user configs
      "aliases")
        cd ~/.config/fish/ && $EDITOR . conf.d/alias.fish
      ;;
      "path")
        cd ~/.config/fish/ && $EDITOR . conf.d/PATH.fish
      ;;
      "cleanup")
        cd ~/.local/bin && $EDITOR cleanup
      ;;
      "dock")
        cd ~/.config/nwg-dock-hyprland && $EDITOR style.css
      ;;
      "mako")
        cd ~/.config/mako && $EDITOR config
      ;;
      "walker")
        cd ~/.config/walker && $EDITOR config.json
      ;;
      "waybar")
        cd ~/.config/waybar && $EDITOR config.jsonc
      ;;
      "rofi")
        cd ~/.config/rofi && $EDITOR config.rasi
      ;;
      "ghostty")
        cd ~/.config/ghostty && $EDITOR config
      ;;
      "foot")
        cd ~/.config/foot && $EDITOR foot.ini
      ;;
      "tmux")
        cd ~/.config/tmux && $EDITOR tmux.conf
      ;;
      "fish")
        cd ~/.config/ && $EDITOR fish/config.fish
      ;;
      "defaults")
        cd ~/.config/ && $EDITOR mimeapps.list
      ;;
      "pins")
        cd ~/.cache/ && $EDITOR nwg-dock-pinned
      ;;
      "starship")
        cd ~/.config/ && $EDITOR starship.toml
      ;;
  esac
}

reload_prompt() {
	case "$1" in
      "")
        echo ":: No service specified. Exiting.."
      ;;
      "dock")
        echo ":: Reloading nwg-dock-hyprland.."
        #killall -9 nwg-dock-hyprland > /dev/null
        #nwg-dock-hyprland -r -mb 15 -mt 10 -i 32 -x -nolauncher & disown
      ;;
      "waybar_full")
        echo ":: Reloading waybar.."
        killall -9 waybar > /dev/null
        waybar & disown
      ;;
      "waybar")
        echo ":: Reloading waybar.."
        pkill -SIGRTMIN+7 waybar > /dev/null
      ;;
      "walker")
        echo ":: Reloading walker service.."
        killall -9 walker > /dev/null
        walker --gapplication-service & disown
      ;;
      "mako")
        echo ":: Reloading mako.."
        makoctl reload > /dev/null
      ;;
      "hypr")
        echo ":: Reloading hyprland.."
        hyprctl reload > /dev/null
      ;;
      "swaync")
        echo ":: Reloading swaync.."
        swaync-client -rs > /dev/null
      ;;
      "hyprpanel")
        echo ":: Reloading HyprPanel.."
        killall -9 gjs > /dev/null
        hyprpanel & disown
      ;;
      "ghostty")
        echo ":: Reloading Ghostty.."
        killall -9 ghostty > /dev/null
        ghostty --gtk-single-instance=true --quit-after-last-window-closed=false --initial-window=false & disown
      ;;
      "mconnect")
        echo ":: Reloading mconnect.."
        killall -9 mconnect > /dev/null
        mconnect -d & disown
      ;;
      "gtk")
        echo ":: Reloading gtk.."
        cd ~/.themes/phocus && npm run build > /dev/null
        gsettings set org.gnome.desktop.interface gtk-theme phocus_refresh > /dev/null
        gsettings set org.gnome.desktop.interface gtk-theme phocus > /dev/null
      ;;
      "spotify")
        echo ":: Reloading spicetify.."
        spicetify apply > /dev/null
      ;;
      "pcmanfm")
        echo ":: Reloading pcmanfm.."
        killall -9 pcmanfm-qt > /dev/null
        pcmanfm-qt --desktop & disown
      ;;
      "steam")
        echo ":: Reloading Steam.."
        ~/.local/bin/hex2rgb ~/.local/share/adwaita-steam/adwaita/colorthemes/base16/base16.css
        sleep 2 && cd ~/.local/share/adwaita-steam/ && ./install.py --color-theme base16 --extras library/hide_whats_new --font googlesans
      ;;
  esac
}

init_prompt() {
    case "$1" in
        "xdg")
    	    echo ":: Initializing xdg-desktop-portal..."
    	    sleep 1
    	    killall xdg-desktop-portal-hyprland > /dev/null
    	    killall xdg-desktop-portal > /dev/null
    	    sleep 1
    	    /usr/lib/xdg-desktop-portal-hyprland > /dev/null &
    	    sleep 2
    	    /usr/lib/xdg-desktop-portal > /dev/null &
    	    sleep 1
        ;;
        "wp")
    	    echo ":: Initializing swww..."
    	    swww-daemon > /dev/null & disown
    	    swww-daemon --format xrgb > /dev/null & disown
        ;;
    esac
}

file_upload() {
    wl-paste | up -t $1 | wl-copy
    notify-send -u normal -a hyprshot -t 750 "0x0.st" "Image uploaded and copied to clipboard." -i /usr/share/icons/Papirus-Dark/96x96/apps/diodon.svg
}

search_steamapps() {
  echo -ne "\033]0;Installed Steam Games\007"
  for id in $(ls ~/.local/share/Steam/steamapps/compatdata); do echo "$id: $(curl -s "https://store.steampowered.com/app/$id/" | grep -oP '(?<=<title>)[^<]*' )"; done
}

search_fonts() {
  echo -ne "\033]0;Installed System Fonts\007"
  echo ":: Listing installed fonts.."
  fc-list |
   	    grep -ioE ": [^:]*$1[^:]+:" |
   	    sed -E 's/(^: |:)//g' |
   	    tr , \\n |
   	    sort |
   	    uniq
}

free_cache() {
  echo -ne "\033]0;Freeing cached RAM..\007"
  echo ":: Freeing cached RAM..."
  echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
}

remove_orphans() {
  echo -ne "\033]0;Removing orphaned packages..\007"
  echo ":: Removing orphaned packages.."
  # pacman -Qdtq | sudo pacman -Rns - > /dev/null
  sudo pacman -Rns $(pacman -Qdtq) --noconfirm > /dev/null
}

toggle_gamemode() {
  echo ":: Toggling game mode..."
	HYPRGAMEMODE=$(hyprctl getoption animations:enabled | awk 'NR==1{print $2}')
	OS=$(cat /etc/os-release | grep -E '^PRETTY_NAME=' | cut -d'"' -f2 | cut -d'=' -f2)
	if [ "$HYPRGAMEMODE" = 1 ] ; then
        notify-send -u normal -a Hyprland -t 750 "$OS" "Game Mode Enabled" -i /usr/share/icons/Papirus-Dark/96x96/devices/input-gaming.svg
	    hyprctl --batch "\
	        keyword animations:enabled 0;\
	        keyword decoration:drop_shadow 0;\
	        keyword decoration:blur:enabled 0;\
	        keyword general:gaps_in 0;\
	        keyword general:gaps_out 0;\
	        keyword general:border_size 1;\
	        keyword decoration:rounding 0" > /dev/null
	    exit
	else
        notify-send -u normal -a Hyprland -t 750 "$OS" "Game Mode Disabled" -i /usr/share/icons/Papirus-Dark/96x96/devices/input-gaming.svg
	fi
	hyprctl reload > /dev/null
}

toggle_blur() {
    echo ":: Toggling blur..."
    HYPRBLUR=$(hyprctl getoption decoration:blur:enabled | awk 'NR==1{print $2}')
    if [ "$HYPRBLUR" = 0 ]; then
        hyprctl keyword decoration:blur:enabled yes
    else
        hyprctl keyword decoration:blur:enabled no
    fi
}

toggle_floatwindows() {
  echo ":: Toggling all floating windows..."
  hyprctl dispatch workspaceopt allfloat > /dev/null
}

show_expose() {
    echo ":: Showing desktop expose..."
    sleep 0.15
    hyprctl dispatch hyprexpo:expo show > /dev/null
}

update_mirrors() {
    echo ":: Updating mirrors..."
    sudo reflector --verbose --country US --latest 8 --protocol http,https --sort rate --save /etc/pacman.d/mirrorlist > /dev/null
}

update_colors() {
    echo ":: Updating system colors..."
    /usr/bin/wallust run -s ~/.local/share/wallpapers/.wallpaper
}

update_prompt() {
    case "$1" in
        "zed")
    	    echo ":: Updating zed..."
            curl -f https://zed.dev/install.sh | sh
        ;;
        "mirrors")
            update_mirrors
        ;;
        "colors")
            update_colors
        ;;
        "")
            echo "ok"
        ;;
    esac
}

popout_prompt() {
    case "$1" in
        "apps")
            walker -m applications
        ;;
        "a")
            walker -m applications
        ;;
        "theme")
            walker -m themes
        ;;
        "t")
            walker -m themes
        ;;
        "wall")
            walker -n -m wallpaper
        ;;
        "w")
            walker -n -m wallpaper
        ;;
        "")
            echo "ok"
        ;;
    esac
}

display_version() {
	echo $BDE_VERSION;
}

# main() ?
if [[ $1 == "--version" ]];then
  display_version
elif [[ $1 == "-v" ]];then
  display_version
elif [[ $1 == "version" ]];then
  display_version
elif [[ $1 == "v" ]];then
  display_version

elif [[ $1 == "rl" ]];then
  reload_prompt $2

elif [[ $1 == "wp" ]];then
  swww img $2

elif [[ $1 == "edit" ]];then
    edit_prompt $2
elif [[ $1 == "e" ]];then
    edit_prompt $2

elif [[ $1 == "cache" ]];then
	free_cache
elif [[ $1 == "free" ]];then
	free_cache

elif [[ $1 == "gm" ]];then
	toggle_gamemode
elif [[ $1 == "game" ]];then
	toggle_gamemode

elif [[ $1 == "rm" ]];then
	remove_orphans
elif [[ $1 == "clean" ]];then
	remove_orphans

elif [[ $1 == "steam" ]];then
	search_steamapps
elif [[ $1 == "fonts" ]];then
	search_fonts

elif [[ $1 == "init" ]];then
	init_prompt $2

elif [[ $1 == "up" ]];then
	file_upload $2

elif [[ $1 == "hf" ]];then
	toggle_floatwindows

elif [[ $1 == "blur" ]];then
	toggle_blur

elif [[ $1 == "x" ]];then
    show_expose
elif [[ $1 == "expose" ]];then
	show_expose

elif [[ $1 == "m" ]];then
    update_mirrors
elif [[ $1 == "mirrors" ]];then
	update_mirrors

elif [[ $1 == "update" ]];then
    update_prompt $2
elif [[ $1 == "u" ]];then
    update_prompt $2

elif [[ $1 == "popout" ]];then
    popout_prompt $2
elif [[ $1 == "p" ]];then
    popout_prompt $2

elif [[ $1 == "theme" ]];then
    popout_prompt "theme"
elif [[ $1 == "wall" ]];then
    popout_prompt "wall"

else
  echo "ok"
fi
